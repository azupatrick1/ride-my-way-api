{"version":3,"sources":["../../../api/v1/controllers/ride.controller.js"],"names":["require","ridesDB","joi","validator","ride","schema","name","string","min","required","from","to","driver","time","validate","exports","all","req","res","status","send","message","create","valid","body","error","details","id","length","push","findOne","find","c","parseInt","params","rideId","update","delete","index","indexOf","splice"],"mappings":"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","file":"ride.controller.js","sourcesContent":["const { ridesDB } = require('../../../index.js');\nconst joi = require('joi');\n\n\nconst validator = (ride) => {\n  const schema = {\n    name: joi.string().min(3).required(),\n    from: joi.string().min(3).required(),\n    to: joi.string().min(3).required(),\n    driver: joi.string().min(3).required(),\n    time: joi.string().min(6).required(),\n  };\n  return joi.validate(ride, schema);\n};\n\nexports.all = (req, res) => {\n  if (!ridesDB) {\n    return res.status(500).send({\n      message: 'no rides',\n    });\n  }\n  return res.send(ridesDB);\n};\n\nexports.create = (req, res) => {\n  const valid = validator(req.body);\n\n  if (valid.error) return res.status(400).send(valid.error.details[0].message);\n\n  const ride = {\n    id: ridesDB.length + 1,\n    name: req.body.name,\n    from: req.body.from,\n    to: req.body.to,\n    driver: req.body.driver,\n    time: req.body.time,\n  };\n  ridesDB.push(ride);\n\n  return res.status(201).send(ride);\n};\n\nexports.findOne = (req, res) => {\n  const ride = ridesDB.find(c => c.id === parseInt(req.params.rideId, 10));\n  if (!ride) return res.status(404).send({ message: `ride with id ${req.params.rideId} not found` });\n  return res.send(ride);\n};\n\nexports.update = (req, res) => {\n  const ride = ridesDB.find(c => c.id === parseInt(req.params.rideId, 10));\n  if (!ride) return res.status(404).send({ message: `ride with id ${req.params.rideId} not found` });\n\n  const valid = validator(req.body);\n  if (valid.error) return res.status(400).send(valid.error.details[0].message);\n\n  ride.name = req.body.name;\n  ride.from = req.body.from;\n  ride.to = req.body.to;\n  ride.driver = req.body.driver;\n  ride.time = req.body.time;\n  return res.send(ride);\n};\n\nexports.delete = (req, res) => {\n  const ride = ridesDB.find(c => c.id === parseInt(req.params.rideId, 10));\n  if (!ride) return res.status(404).send({ message: `ride with id ${req.params.rideId} not found` });\n\n  const index = ridesDB.indexOf(ride);\n  ridesDB.splice(index, 1);\n\n  return res.send({ message: `ride with id ${req.params.rideId} was deleted successfully` });\n};\n\n"]}
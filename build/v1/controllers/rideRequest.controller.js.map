{"version":3,"sources":["../../../api/v1/controllers/rideRequest.controller.js"],"names":["require","ridesDB","requestDB","joi","validator","request","schema","sender","string","min","required","validate","exports","all","req","res","ride","find","c","id","parseInt","params","rideId","status","send","message","create","valid","body","error","details","length","rideName","name","push"],"mappings":";;eAAoBA,QAAQ,mBAAR,C;IAAZC,O,YAAAA,O;;gBACcD,QAAQ,mBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,MAAMH,QAAQ,KAAR,CAAZ;;AAGA,IAAMI,YAAY,SAAZA,SAAY,CAACC,OAAD,EAAa;AAC7B,MAAMC,SAAS;AACbC,YAAQJ,IAAIK,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,QAApB;AADK,GAAf;AAGA,SAAOP,IAAIQ,QAAJ,CAAaN,OAAb,EAAsBC,MAAtB,CAAP;AACD,CALD;;AAOAM,QAAQC,GAAR,GAAc,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,MAAMC,OAAOf,QAAQgB,IAAR,CAAa;AAAA,WAAKC,EAAEC,EAAF,KAASC,SAASN,IAAIO,MAAJ,CAAWC,MAApB,EAA4B,EAA5B,CAAd;AAAA,GAAb,CAAb;AACA,MAAI,CAACN,IAAL,EAAW,OAAOD,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,2BAAyBX,IAAIO,MAAJ,CAAWC,MAApC,eAAF,EAArB,CAAP;AACX,MAAMjB,UAAUH,UAAUe,IAAV,CAAe;AAAA,WAAKC,EAAEI,MAAF,KAAaF,SAASJ,KAAKG,EAAd,EAAkB,EAAlB,CAAlB;AAAA,GAAf,CAAhB;;AAEA,MAAI,CAACd,OAAL,EAAc;AACZ,WAAOU,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS;AADiB,KAArB,CAAP;AAGD;AACD,SAAOV,IAAIS,IAAJ,CAASnB,OAAT,CAAP;AACD,CAXD;;AAaAO,QAAQc,MAAR,GAAiB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAMC,OAAOf,QAAQgB,IAAR,CAAa;AAAA,WAAKC,EAAEC,EAAF,KAASC,SAASN,IAAIO,MAAJ,CAAWC,MAApB,EAA4B,EAA5B,CAAd;AAAA,GAAb,CAAb;AACA,MAAI,CAACN,IAAL,EAAW,OAAOD,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,2BAAyBX,IAAIO,MAAJ,CAAWC,MAApC,eAAF,EAArB,CAAP;;AAEX,MAAMK,QAAQvB,UAAUU,IAAIc,IAAd,CAAd;AACA,MAAID,MAAME,KAAV,EAAiB,OAAOd,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,MAAME,KAAN,CAAYC,OAAZ,CAAoB,CAApB,EAAuBL,OAA5C,CAAP;;AAEjB,MAAMpB,UAAU;AACdc,QAAIjB,UAAU6B,MAAV,GAAmB,CADT;AAEdT,YAAQN,KAAKG,EAFC;AAGda,cAAUhB,KAAKiB,IAHD;AAId1B,YAAQO,IAAIc,IAAJ,CAASrB,MAJH;AAKdgB,YAAQ;AALM,GAAhB;;AAQArB,YAAUgC,IAAV,CAAe7B,OAAf;;AAEA,SAAOU,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,OAArB,CAAP;AACD,CAlBD","file":"rideRequest.controller.js","sourcesContent":["const { ridesDB } = require('../../../index.js');\r\nconst { requestDB } = require('../../../index.js');\r\nconst joi = require('joi');\r\n\r\n\r\nconst validator = (request) => {\r\n  const schema = {\r\n    sender: joi.string().min(3).required(),\r\n  };\r\n  return joi.validate(request, schema);\r\n};\r\n\r\nexports.all = (req, res) => {\r\n  const ride = ridesDB.find(c => c.id === parseInt(req.params.rideId, 10));\r\n  if (!ride) return res.status(404).send({ message: `ride with id ${req.params.rideId} not found` });\r\n  const request = requestDB.find(c => c.rideId === parseInt(ride.id, 10));\r\n\r\n  if (!request) {\r\n    return res.status(500).send({\r\n      message: 'no request',\r\n    });\r\n  }\r\n  return res.send(request);\r\n};\r\n\r\nexports.create = (req, res) => {\r\n  const ride = ridesDB.find(c => c.id === parseInt(req.params.rideId, 10));\r\n  if (!ride) return res.status(400).send({ message: `ride with id ${req.params.rideId} not found` });\r\n\r\n  const valid = validator(req.body);\r\n  if (valid.error) return res.status(400).send(valid.error.details[0].message);\r\n\r\n  const request = {\r\n    id: requestDB.length + 1,\r\n    rideId: ride.id,\r\n    rideName: ride.name,\r\n    sender: req.body.sender,\r\n    status: 'sent',\r\n  };\r\n\r\n  requestDB.push(request);\r\n\r\n  return res.status(201).send(request);\r\n};\r\n"]}